/****************************************************
题目描述：
    某国为了防御敌国的导弹袭击，开发出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：
虽然他的第一发炮弹能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达
捕捉到敌国的导弹来袭，并观测到导弹依次飞来的高度，请计算这套系统最多能够拦截多少导弹。拦截
来袭导弹时，必须按来袭导弹袭击的时间顺序，不允许先拦截后面的导弹，在拦截前面的导弹。
输入：
    每行输入有两行，
    第一行，输入雷达捕捉到的敌国导弹的数量k（k<=25),
    第二行，输入k个正整数，表示k枚导弹的高度，按来袭导弹的袭击时间顺序给出，以空格分割。
输出：
    每组输出只有一行，包含一个整数，表示最多能拦截多少枚导弹。
样例输入和输出：
8
300 207 155 300 299 170 158 65
6

****************************************************/
#include<stdio.h>
int max(int a,int b){return a>b?a:b;}
int list[26];  //按袭击事件的顺序保存各导弹高度
int dp[26];   //dp[i]保存以第i个导弹结尾的最长不增长子序列
int main(){
    int n;
    while(scanf("%d",&n)!=EOF){
        for(int i=1;i<=n;i++){
            scanf("%d",&list[i]);
        }
        for(int i=1;i<=n;i++){//按照袭击的时间顺序确定每一个dp[i]
            int tmax = 1;    //最大值的初值为1，即以其结尾的最长不增长子序列长度至少为1
            for(int j=1;j<i;j++){//遍历其前所有导弹高度
                if(list[j]>=list[i]){//若j号导弹 不比当前导弹低
                    tmax = max(tmax, dp[j]+1);  //将当前导弹排列在以j号导弹结尾的最长子序列之后，计算其长度dp[j]+1,若大于当前最大值，则更新最大值
                }
            }
            dp[i] = tmax;
        }
        int ans = 1;
        for(int i=1;i<=n;i++){
            ans = max(ans,dp[i]);
            printf("%d\n",dp[i]);
        }//找到一以每一个元素结尾的最长不增长子序列中的最大值，该最大值即为答案
        printf("%d\n",ans);
    }
    return 0;
}








